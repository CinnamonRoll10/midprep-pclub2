{"ast":null,"code":"import Web3 from \"web3\";\nimport TaskAllocationAbi from \"./TaskAllocation2.json\"; // Adjust path if needed\n\nconst TASK_ALLOCATION_ADDRESS = \"Your_Deployed_Contract_Address\"; // Replace with your deployed contract address\n\nexport const getTaskAllocationContract = () => {\n  // Create a web3 instance and connect to MetaMask\n  const web3 = new Web3(window.ethereum);\n\n  // Request account access if needed (only if not already granted)\n  window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n\n  // Get the user's account (you might want to handle this asynchronously)\n  const accounts = web3.eth.getAccounts();\n  const account = accounts[0]; // Assuming the user has at least one account connected\n\n  // Create a contract instance\n  const taskAllocationContract = new web3.eth.Contract(TaskAllocationAbi,\n  // ABI from the JSON file\n  TASK_ALLOCATION_ADDRESS,\n  // Address of the deployed contract\n  {\n    from: account\n  } // Default account for transactions\n  );\n  return taskAllocationContract;\n};","map":{"version":3,"names":["Web3","TaskAllocationAbi","TASK_ALLOCATION_ADDRESS","getTaskAllocationContract","web3","window","ethereum","request","method","accounts","eth","getAccounts","account","taskAllocationContract","Contract","from"],"sources":["/Users/prakritiprasad/Documents/midprep-pclub2/client/src/TaskAllocation.js"],"sourcesContent":["import Web3 from \"web3\";\nimport TaskAllocationAbi from \"./TaskAllocation2.json\"; // Adjust path if needed\n\nconst TASK_ALLOCATION_ADDRESS = \"Your_Deployed_Contract_Address\"; // Replace with your deployed contract address\n\nexport const getTaskAllocationContract = () => {\n    // Create a web3 instance and connect to MetaMask\n    const web3 = new Web3(window.ethereum);\n    \n    // Request account access if needed (only if not already granted)\n    window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    // Get the user's account (you might want to handle this asynchronously)\n    const accounts = web3.eth.getAccounts();\n    const account = accounts[0]; // Assuming the user has at least one account connected\n\n    // Create a contract instance\n    const taskAllocationContract = new web3.eth.Contract(\n        TaskAllocationAbi,       // ABI from the JSON file\n        TASK_ALLOCATION_ADDRESS,  // Address of the deployed contract\n        { from: account }         // Default account for transactions\n    );\n\n    return taskAllocationContract;\n};\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,iBAAiB,MAAM,wBAAwB,CAAC,CAAC;;AAExD,MAAMC,uBAAuB,GAAG,gCAAgC,CAAC,CAAC;;AAElE,OAAO,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;EAC3C;EACA,MAAMC,IAAI,GAAG,IAAIJ,IAAI,CAACK,MAAM,CAACC,QAAQ,CAAC;;EAEtC;EACAD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAsB,CAAC,CAAC;;EAE1D;EACA,MAAMC,QAAQ,GAAGL,IAAI,CAACM,GAAG,CAACC,WAAW,CAAC,CAAC;EACvC,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE7B;EACA,MAAMI,sBAAsB,GAAG,IAAIT,IAAI,CAACM,GAAG,CAACI,QAAQ,CAChDb,iBAAiB;EAAQ;EACzBC,uBAAuB;EAAG;EAC1B;IAAEa,IAAI,EAAEH;EAAQ,CAAC,CAAS;EAC9B,CAAC;EAED,OAAOC,sBAAsB;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}