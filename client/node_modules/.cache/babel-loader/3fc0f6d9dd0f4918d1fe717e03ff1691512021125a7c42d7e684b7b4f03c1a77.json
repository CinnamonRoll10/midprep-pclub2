{"ast":null,"code":"import Web3 from \"web3\";\nconst TASK_ALLOCATION_ADDRESS = \"0xC7F38E49dC0A0ec177cBE12AFBC26c3E2C01958F\"; // Replace with your deployed contract address\n\nexport const getTaskAllocationContract = async () => {\n  // Create a web3 instance and connect to MetaMask\n  const web3 = new Web3(window.ethereum);\n\n  // Request account access if needed (only if not already granted)\n  await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n\n  // Fetch the ABI from the public folder\n  const response = await fetch('/TaskAllocation.json');\n  const TaskAllocationAbi = await response.json();\n\n  // Get the user's account (you might want to handle this asynchronously)\n  const accounts = await web3.eth.getAccounts();\n  const account = accounts[0]; // Assuming the user has at least one account connected\n\n  // Create a contract instance\n  const taskAllocationContract = new web3.eth.Contract(TaskAllocationAbi,\n  // ABI from the JSON file\n  TASK_ALLOCATION_ADDRESS,\n  // Address of the deployed contract\n  {\n    from: account\n  } // Default account for transactions\n  );\n  return taskAllocationContract;\n};","map":{"version":3,"names":["Web3","TASK_ALLOCATION_ADDRESS","getTaskAllocationContract","web3","window","ethereum","request","method","response","fetch","TaskAllocationAbi","json","accounts","eth","getAccounts","account","taskAllocationContract","Contract","from"],"sources":["/Users/prakritiprasad/Documents/midprep-pclub2/client/src/utils.js"],"sourcesContent":["import Web3 from \"web3\";\n\nconst TASK_ALLOCATION_ADDRESS = \"0xC7F38E49dC0A0ec177cBE12AFBC26c3E2C01958F\"; // Replace with your deployed contract address\n\nexport const getTaskAllocationContract = async () => {\n    // Create a web3 instance and connect to MetaMask\n    const web3 = new Web3(window.ethereum);\n\n    // Request account access if needed (only if not already granted)\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    // Fetch the ABI from the public folder\n    const response = await fetch('/TaskAllocation.json');\n    const TaskAllocationAbi = await response.json();\n\n    // Get the user's account (you might want to handle this asynchronously)\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0]; // Assuming the user has at least one account connected\n\n    // Create a contract instance\n    const taskAllocationContract = new web3.eth.Contract(\n        TaskAllocationAbi,       // ABI from the JSON file\n        TASK_ALLOCATION_ADDRESS,  // Address of the deployed contract\n        { from: account }         // Default account for transactions\n    );\n\n    return taskAllocationContract;\n};\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,MAAMC,uBAAuB,GAAG,4CAA4C,CAAC,CAAC;;AAE9E,OAAO,MAAMC,yBAAyB,GAAG,MAAAA,CAAA,KAAY;EACjD;EACA,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACI,MAAM,CAACC,QAAQ,CAAC;;EAEtC;EACA,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAsB,CAAC,CAAC;;EAEhE;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsB,CAAC;EACpD,MAAMC,iBAAiB,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;EAE/C;EACA,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACU,GAAG,CAACC,WAAW,CAAC,CAAC;EAC7C,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE7B;EACA,MAAMI,sBAAsB,GAAG,IAAIb,IAAI,CAACU,GAAG,CAACI,QAAQ,CAChDP,iBAAiB;EAAQ;EACzBT,uBAAuB;EAAG;EAC1B;IAAEiB,IAAI,EAAEH;EAAQ,CAAC,CAAS;EAC9B,CAAC;EAED,OAAOC,sBAAsB;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}