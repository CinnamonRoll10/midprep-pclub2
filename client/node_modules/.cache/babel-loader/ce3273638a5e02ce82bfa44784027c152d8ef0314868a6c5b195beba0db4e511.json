{"ast":null,"code":"var _jsxFileName = \"/Users/prakritiprasad/Documents/midprep-pclub2/client/src/TaskAllocation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getTaskAllocationContract } from './utils'; // Adjust path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskAllocation() {\n  _s();\n  const [taskId, setTaskId] = useState('');\n  const [workerId, setWorkerId] = useState('');\n  const allocateTask = async () => {\n    const contract = await getTaskAllocationContract();\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const tx = await contract.methods.allocateTask(taskId, workerId).send({\n        from: accounts[0]\n      });\n      await tx.wait();\n      alert('Task allocated successfully!');\n    } catch (error) {\n      console.error(\"Error allocating task:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Allocate Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Task ID\",\n      value: taskId,\n      onChange: e => setTaskId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Worker ID\",\n      value: workerId,\n      onChange: e => setWorkerId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: allocateTask,\n      children: \"Allocate Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskAllocation, \"B8QtH/OHIPcu2mcnlX+Q0v9/r6w=\");\n_c = TaskAllocation;\nexport default TaskAllocation;\nvar _c;\n$RefreshReg$(_c, \"TaskAllocation\");","map":{"version":3,"names":["React","useState","getTaskAllocationContract","jsxDEV","_jsxDEV","TaskAllocation","_s","taskId","setTaskId","workerId","setWorkerId","allocateTask","contract","accounts","window","ethereum","request","method","tx","methods","send","from","wait","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/prakritiprasad/Documents/midprep-pclub2/client/src/TaskAllocation.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { getTaskAllocationContract } from './utils'; // Adjust path as needed\n\nfunction TaskAllocation() {\n    const [taskId, setTaskId] = useState('');\n    const [workerId, setWorkerId] = useState('');\n\n    const allocateTask = async () => {\n        const contract = await getTaskAllocationContract();\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            const tx = await contract.methods.allocateTask(taskId, workerId).send({ from: accounts[0] });\n            await tx.wait();\n            alert('Task allocated successfully!');\n        } catch (error) {\n            console.error(\"Error allocating task:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Allocate Task</h2>\n            <input\n                type=\"number\"\n                placeholder=\"Task ID\"\n                value={taskId}\n                onChange={(e) => setTaskId(e.target.value)}\n            />\n            <input\n                type=\"number\"\n                placeholder=\"Worker ID\"\n                value={workerId}\n                onChange={(e) => setWorkerId(e.target.value)}\n            />\n            <button onClick={allocateTask}>Allocate Task</button>\n        </div>\n    );\n}\n\nexport default TaskAllocation;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,yBAAyB,QAAQ,SAAS,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,QAAQ,GAAG,MAAMV,yBAAyB,CAAC,CAAC;IAClD,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MACjF,MAAMC,EAAE,GAAG,MAAMN,QAAQ,CAACO,OAAO,CAACR,YAAY,CAACJ,MAAM,EAAEE,QAAQ,CAAC,CAACW,IAAI,CAAC;QAAEC,IAAI,EAAER,QAAQ,CAAC,CAAC;MAAE,CAAC,CAAC;MAC5F,MAAMK,EAAE,CAACI,IAAI,CAAC,CAAC;MACfC,KAAK,CAAC,8BAA8B,CAAC;IACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,oBACIpB,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB1B,OAAA;MACI2B,IAAI,EAAC,QAAQ;MACbC,WAAW,EAAC,SAAS;MACrBC,KAAK,EAAE1B,MAAO;MACd2B,QAAQ,EAAGC,CAAC,IAAK3B,SAAS,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACF1B,OAAA;MACI2B,IAAI,EAAC,QAAQ;MACbC,WAAW,EAAC,WAAW;MACvBC,KAAK,EAAExB,QAAS;MAChByB,QAAQ,EAAGC,CAAC,IAAKzB,WAAW,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACF1B,OAAA;MAAQiC,OAAO,EAAE1B,YAAa;MAAAe,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEd;AAACxB,EAAA,CAlCQD,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AAoCvB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}